[{"categories":null,"content":"NGINX QUIC 编译与配置","date":"2022-08-07","objectID":"/nginx%E4%BD%BF%E7%94%A8http3quic/","tags":null,"title":"Nginx使用HTTP3(QUIC)","uri":"/nginx%E4%BD%BF%E7%94%A8http3quic/"},{"categories":null,"content":"探索 Hugo - LoveIt 主题的全部内容和背后的核心概念. 简介:维基百科中关于quic的定义 ","date":"2022-08-07","objectID":"/nginx%E4%BD%BF%E7%94%A8http3quic/:0:0","tags":null,"title":"Nginx使用HTTP3(QUIC)","uri":"/nginx%E4%BD%BF%E7%94%A8http3quic/"},{"categories":null,"content":"1. 安装依赖 以Ubuntu64位为例, sudo apt update \u0026\u0026 sudo apt install build-essential mercurial psmisc lsb-release cmake golang libunwind-dev git libpcre3-dev zlib1g-dev ","date":"2022-08-07","objectID":"/nginx%E4%BD%BF%E7%94%A8http3quic/:1:0","tags":null,"title":"Nginx使用HTTP3(QUIC)","uri":"/nginx%E4%BD%BF%E7%94%A8http3quic/"},{"categories":null,"content":"2.编译boringssl 由于OpenSSL官方暂不支持nginx-quic,需要使用Google基于OpenSSL开发的BoringSSL分支来提供支持,源码地址 cd ~ git clone https://github.com/google/boringssl cd boringssl/ mkdir build \u0026\u0026 cd build cmake ../ make #期间可能会出现golang下载包超时的情况,需要设置goproxy #执行 go env -w GOPROXY=\"https://goproxy.cn,direct\" ","date":"2022-08-07","objectID":"/nginx%E4%BD%BF%E7%94%A8http3quic/:2:0","tags":null,"title":"Nginx使用HTTP3(QUIC)","uri":"/nginx%E4%BD%BF%E7%94%A8http3quic/"},{"categories":null,"content":"3.编译nginx nginx-quic项目托管在源码地址 sudo apt install mercurial hg clone -b quic https://hg.nginx.org/nginx-quic ./auto/configure --with-debug --prefix=/usr/local/nginx-quic --with-http_v3_module --with-http_ssl_module --with-http_v2_module \\ --with-cc-opt=\"-I../boringssl/include\" \\ --with-ld-opt=\"-L../boringssl/build/ssl \\ -L../boringssl/build/crypto\" make make install nginx-quic的相关目录在/usr/local/nginx-quic下 ","date":"2022-08-07","objectID":"/nginx%E4%BD%BF%E7%94%A8http3quic/:3:0","tags":null,"title":"Nginx使用HTTP3(QUIC)","uri":"/nginx%E4%BD%BF%E7%94%A8http3quic/"},{"categories":null,"content":"4.配置nginx.conf并测试 使用文本编辑软件编辑 /usr/local/nginx-quic/conf/nginx.conf sudo vim /usr/local/nginx-quic/conf/nginx.conf #将之前的server{}改为下面的,如果有多个网站,reuseport只能出现一个网站中 server { #listen 80; listen 443 ssl http2; listen 443 http3 reuseport; server_name example.com; index index.html index.htm; root /web/static/example.com; charset utf-8; #SSL-START ssl_certificate /web/cert/example.pem; ssl_certificate_key /web/cert/example.key; ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3; #SSL-END add_header Alt-Svc 'h3=\":443\"; ma=86400;quic=\":443\"; h3-29=\":443\";h3-27=\":443\";h3-25=\":443\"; h3-T050=\":443\"; h3-Q050=\":443\";h3-Q049=\":443\";h3-Q048=\":443\"; h3-Q046=\":443\"; h3-Q043=\":443\"'; # Advertise that QUIC is available;; #limit_conn perserver 400; #limit_conn perip 15; #limit_rate 1024k; #ERROR-PAGE-START #error_page 404 /404.html; #error_page 502 /502.html; #ERROR-PAGE-END access_log /web/log/example.log; error_log /web/log/example.error.log; } #退出vim,启动nginx sudo ./usr/local/nginx-quic/sbin/nginx ","date":"2022-08-07","objectID":"/nginx%E4%BD%BF%E7%94%A8http3quic/:4:0","tags":null,"title":"Nginx使用HTTP3(QUIC)","uri":"/nginx%E4%BD%BF%E7%94%A8http3quic/"},{"categories":null,"content":"5.测试是否开启http3 使用http3check来进行测试,下面是我的网站测试截图 使用Google chrome测试 ","date":"2022-08-07","objectID":"/nginx%E4%BD%BF%E7%94%A8http3quic/:5:0","tags":null,"title":"Nginx使用HTTP3(QUIC)","uri":"/nginx%E4%BD%BF%E7%94%A8http3quic/"},{"categories":null,"content":"附上编译完成的nginx以及相关配置的下载链接😀 ","date":"2022-08-07","objectID":"/nginx%E4%BD%BF%E7%94%A8http3quic/:6:0","tags":null,"title":"Nginx使用HTTP3(QUIC)","uri":"/nginx%E4%BD%BF%E7%94%A8http3quic/"},{"categories":null,"content":"1.使用nginx的rewrite功能将http修改为https server { listen 80; #将http的URL rewrite为https rewrite ^(.*) https://$server_name$1 permanent; } server { listen 443 ssl http2; #证书域名 server_name www.xxx.com; ssl_certificate /web/cert/example.pem; ssl_certificate_key /web/cert/example.key; ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3; } 2.使用301重定向将http请求重定向到https server { listen 80; #将http重定向为https return 301 https://$host$request_uri; } server { listen 443 ssl http2; #证书域名 server_name www.xxx.com; ssl_certificate /web/cert/example.pem; ssl_certificate_key /web/cert/example.key; ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3; } 3.使用error_page转发 server { listen 80; listen 443 ssl; server_name www.xxx.com; ssl on; ssl_certificate /etc/nginx/ssl/domain.com.crt; ssl_certificate_key /etc/nginx/ssl/domain.com.crt; # other error_page 497 https://$server_name$request_uri; } ","date":"2020-07-20","objectID":"/nginx-http%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0https/:0:0","tags":null,"title":"Nginx HTTP请求跳转HTTPS","uri":"/nginx-http%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0https/"},{"categories":null,"content":"建议使用301重定向，下面是我的网站截图 ","date":"2020-07-20","objectID":"/nginx-http%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0https/:1:0","tags":null,"title":"Nginx HTTP请求跳转HTTPS","uri":"/nginx-http%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0https/"}]