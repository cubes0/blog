<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>cubes&#39;s blog</title>
        <link>https://www.cybeor.com/</link>
        <description>cubes&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>0@cybeor.com (cubes)</managingEditor>
            <webMaster>0@cybeor.com (cubes)</webMaster><copyright>cubes&#39;s blog</copyright><lastBuildDate>Sun, 07 Aug 2022 00:00:00 &#43;0000</lastBuildDate>
            <atom:link href="https://www.cybeor.com/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Nginx使用HTTP3(QUIC)</title>
    <link>https://www.cybeor.com/nginx%E4%BD%BF%E7%94%A8http3quic/</link>
    <pubDate>Sun, 07 Aug 2022 00:00:00 &#43;0000</pubDate>
    <author>cubes</author>
    <guid>https://www.cybeor.com/nginx%E4%BD%BF%E7%94%A8http3quic/</guid>
    <description><![CDATA[探索 Hugo - LoveIt 主题的全部内容和背后的核心概念. 简介:维基百科中关于quic的定义
1. 安装依赖 以Ubuntu64位为例,
1 sudo apt update &amp;&amp; sudo apt install build-essential mercurial psmisc lsb-release cmake golang libunwind-dev git libpcre3-dev zlib1g-dev 2.编译boringssl 由于OpenSSL官方暂不支持nginx-quic,需要使用Google基于OpenSSL开发的BoringSSL分支来提供支持,源码地址
1 2 3 4 5 6 7 8 9 cd ~ git clone https://github.com/google/boringssl cd boringssl/ mkdir build &amp;&amp; cd build cmake ../ make #期间可能会出现golang下载包超时的情况,需要设置goproxy #执行 go env -w GOPROXY=&#34;https://goproxy.cn,direct&#34; 3.编译nginx nginx-quic项目托管在源码地址
1 2 3 4 5 6 7 8 sudo apt install mercurial hg clone -b quic https://hg.]]></description>
</item>
<item>
    <title>Nginx HTTP请求跳转HTTPS</title>
    <link>https://www.cybeor.com/nginx-http%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0https/</link>
    <pubDate>Mon, 20 Jul 2020 00:00:00 &#43;0000</pubDate>
    <author>cubes</author>
    <guid>https://www.cybeor.com/nginx-http%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0https/</guid>
    <description><![CDATA[1.使用nginx的rewrite功能将http修改为https 1 2 3 4 5 6 7 8 9 10 11 12 13 14 server { listen 80; #将http的URL rewrite为https rewrite ^(.*) https://$server_name$1 permanent; } server { listen 443 ssl http2; #证书域名 server_name www.xxx.com; ssl_certificate /web/cert/example.pem; ssl_certificate_key /web/cert/example.key; ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3; } 2.使用301重定向将http请求重定向到https 1 2 3 4 5 6 7 8 9 10 11 12 13 14 server { listen 80; #将http重定向为https return 301 https://$host$request_uri; } server { listen 443 ssl http2; #证书域名 server_name www.]]></description>
</item>
</channel>
</rss>
